<?php

namespace App\Http\Controllers;
use App\Models\UserSetting;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Storage;
use Spatie\SimpleExcel\SimpleExcelReader;

class ExcelController extends Controller
{

    public function main()
    {
        $userSetting = UserSetting::first();
        return view('main', compact('userSetting'));
    }

    public function uploadform()
    {
        $userSetting = UserSetting::first();
        return view('upload', compact('userSetting'));
    }

    private function sanitizeStr($input_text) 
    {
        if(mb_detect_encoding($input_text, 'UTF-8', true) === false) {
            $input_text = mb_convert_encoding($input_text, 'UTF-8', 'auto');
        }
        $cleaned_text = str_replace(
            ['á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ'],
            ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N'],
            $input_text
        );
        $pattern = '/[^A-Za-z0-9.,()\/ªº \-_]/u';
        $cleaned_text = rtrim($cleaned_text, ".-");
        $cleaned_text = preg_replace($pattern, '', $cleaned_text);
        $cleaned_text = str_replace(',', '.', $cleaned_text);
        $cleaned_text = str_replace('  ', ' ', $cleaned_text);
        $cleaned_text = str_replace('º', '.', $cleaned_text);
        return strtoupper(filter_var($cleaned_text, FILTER_SANITIZE_STRING));
    }

    public function upload(Request $request)
    {
        $request->validate([
            'file' => 'required|mimes:xlsx,xls'
        ]);
        $file = $request->file('file');
        $tempFilePath = $file->store('temp');
        try {
            $rows = SimpleExcelReader::create(storage_path('app' . DIRECTORY_SEPARATOR . $tempFilePath))->getRows();
            $data = [];
        } catch (\Exception $e) {
            \Log::error('Error importing Excel file: ' . $e->getMessage());
            return redirect('/error');
        }
        $rows->each(function (array $rowProperties) use (&$data) {
            $formattedRow = [];
            foreach ($rowProperties as $key => $value) {
                if (is_a($value, 'DateTimeImmutable')) {
                    $formattedRow[$key] = $value->format('Y-m-d H:i:s');
                } else {
                    $formattedRow[$key] = strval(strtoupper($value));
                }
            }
            $data[] = $formattedRow;
        });
        if ( count($data) >= 150 ) {
            return redirect('/error');
        }
        $totalCols = count($data[0]);
        $headers = [];
        foreach($data[0] as $key => $value) {
            $headers[] = $key;
        }
        $headers = array_slice($headers, 0, 12);
        $requiredHeaders1 = [
            'Id', 'Nombre', 'Apellidos', 'DNI', 'TelefonoMovil', 'TelefonoTrabajo',
            'EMail', 'Direccion1', 'Direccion2', 'Poblacion', 'CodPostal', 'Provincia'
        ];
        $missingHeaders1 = array_diff($requiredHeaders1, $headers);
        $requiredHeaders2 = [
            'IdSocio', 'Nombre', 'Apellidos', 'DNI', 'TelefonoMovil', 'TelefonoTrabajo',
            'EMail', 'Direccion1', 'AttPostal', 'Poblacion', 'CodPostal', 'Provincia'
        ];
        $missingHeaders2 = array_diff($requiredHeaders2, $headers);
        if (!empty($missingHeaders1) && !empty($missingHeaders2)) {
            return redirect('/error');
        }
        usort($data, function($a, $b) {
            return $a['CodPostal'] <=> $b['CodPostal'];
        });
        $userSetting = UserSetting::first();
        $i = 0;
        foreach ($data as $innerArray) {
            $dir2 = ( null !== ($innerArray['AttPostal'] ?? null) ) 
                    ? $this->sanitizeStr($innerArray['AttPostal']) 
                    : $this->sanitizeStr($innerArray['Direccion2']);
            $newOrder = [
                'Id' => $i,
                'Nombre' => strtoupper($this->sanitizeStr($innerArray['Nombre'])) . 
                            ' ' . $this->sanitizeStr($innerArray['Apellidos']),
                'Direccion' => strtoupper($this->sanitizeStr($innerArray['Direccion1'])),
                'DireccionComp' => strtoupper($dir2),
                'Poblacion' => strtoupper($innerArray['Poblacion']),
                'Provincia' => strtoupper($this->sanitizeStr($innerArray['Provincia'])),
                'CodPostal' => strtoupper($innerArray['CodPostal']),
                'Pais' => 'ES',
                'TlfRemitente' => strtoupper($userSetting['phone']),
                'EmailRemitente' => $userSetting['email']
            ];
            $i++;
            $parsedData[] = $newOrder;
        }
        $parsedData = array_map(function ($innerArray) {
            return array_map(function ($value) {
            return is_string($value) ? trim($value) : $value;
            }, $innerArray);
        }, $parsedData);
        $userSetting = UserSetting::first();
        $response = view('table', compact('parsedData'));
        if (File::exists(storage_path('app' . DIRECTORY_SEPARATOR . $tempFilePath))) {
            File::delete(storage_path('app' . DIRECTORY_SEPARATOR . $tempFilePath));
        }
        return view('table', compact('userSetting', 'parsedData'));
    }

    public function openStorage()
    {
        $directoryPath = storage_path('app' . DIRECTORY_SEPARATOR . 'data');
        shell_exec('explorer ' . escapeshellarg($directoryPath));
    }

    public function copyTemplate()
    {
        $filename = 'plantilla_txtcorreos.xlsx';
        $sourceFilePath = storage_path('app' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . $filename);
        $destinationDirectory = storage_path('app' . DIRECTORY_SEPARATOR . 'data');
        if (file_exists($sourceFilePath)) {
            $destinationFilePath = $destinationDirectory . DIRECTORY_SEPARATOR . $filename;
            if (copy($sourceFilePath, $destinationFilePath)) {
                Log::info("File $filename copied successfully.");
            } else {
                Log::error("Failed to copy the file $filename.");
            }
        } else {
            Log::error("Source file $filename does not exist.");
        }
    }

    public function copyDocumentation()
    {
        $filename = 'manual_txtcorreos.pdf';
        $sourceFilePath = storage_path('app' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . $filename);
        $destinationDirectory = storage_path('app' . DIRECTORY_SEPARATOR . 'data');
        if (file_exists($sourceFilePath)) {
            $destinationFilePath = $destinationDirectory . DIRECTORY_SEPARATOR . $filename;
            if (copy($sourceFilePath, $destinationFilePath)) {
                Log::info("File $filename copied successfully.");
            } else {
                Log::error("Failed to copy the file $filename.");
            }
        } else {
            Log::error("Source file $filename does not exist.");
        }
        $filename = 'docs_txtcorreos.pdf';
        $sourceFilePath = storage_path('app' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . $filename);
        $destinationDirectory = storage_path('app' . DIRECTORY_SEPARATOR . 'data');
        if (file_exists($sourceFilePath)) {
            $destinationFilePath = $destinationDirectory . DIRECTORY_SEPARATOR . $filename;
            if (copy($sourceFilePath, $destinationFilePath)) {
                Log::info("File $filename copied successfully.");
            } else {
                Log::error("Failed to copy the file $filename.");
            }
        } else {
            Log::error("Source file $filename does not exist.");
        }
    }

    public function generateTxt(Request $request) 
    {
        $parsedData = $request->except('_token');
        $dateTime = date('Ymd_His');
        $string = 'fichero_txt_correos';
        $fileName = $dateTime . '_' . $string . '.txt';
        $filePath = 'data/' . $fileName;
        $fileContent = '';
        $numEntries = count($parsedData['Id']);
        $counter = 1;
        foreach ($parsedData['Id'] as $index => $id) {
            if ($numEntries == 1 && $numEntries == $counter) {
                $pos = 'U';
            } elseif ($numEntries > 1 && $counter == 1) {
                $pos = 'C';
            } elseif ($numEntries > 1 && $counter == $numEntries) {
                $pos = 'F';
            } else {
                $pos = 'R';
            }
            $counter++;

            $line = [
                $pos, // C: Para primer registro (cabecera), F: último registro (final), R: resto de registros, U: registro único...
                '2018v002', // Año creación estructura y versión...
                'S0003', // Código producto: S0003 carta certificada nacional...
                '', // Tipo de Franqueo...
                '', // Código Etiquetador...
                '', // Número de contrato...
                '', // Número cliente...
                '', // Número de máquina de franquear...
                '', // Importe franqueado...
                '', // Código de Envío...
                '', // Nº de expedición...
                '', // Referencia de la expedición...
                '', // Autorización entregas parciales...
                '1', // Total Bultos...
                '', // Numero de bulto...
                '', // Número manifiesto...
                '', // Código de Promoción...
                '', // Causa del Reenvío...
                $this->sanitizeStr($parsedData['Nombre'][$id]), // Nombre, máximo 300 caracteres...
                '', // Apellido 1...
                '', // Apellido 2...
                '', // NIF...
                '', // Empresa...
                '', // Persona contacto...
                '', // Tipo dirección...
                $this->sanitizeStr($parsedData['Direccion'][$id]), // Dirección, máximo 100 caracteres...
                $this->sanitizeStr($parsedData['DireccionComp'][$id]), // Direccion complemento, máximo 100 caracteres...
                '', // Número...
                '', // Portal...
                '', // Bloque...
                '', // Escalera...
                '', // Piso...
                '', // Puerta...
                $this->sanitizeStr($parsedData['Poblacion'][$id]), // Localidad, máximo 100 caracteres...
                $this->sanitizeStr($parsedData['Provincia'][$id]), // Provincia, máximo 40 caracteres...
                $this->sanitizeStr($parsedData['CodPostal'][$id]), // CP...
                '', // ZIP...
                $this->sanitizeStr($parsedData['Pais'][$id]), // País, es en código ISO; ES, FR etc..
                '', // Oficina Elegida...
                '', // Destino apartado postal internacional...
                '', // Apartado Postal destino...
                '', // Teléfono contacto destinatario, máximo 15 caracteres...
                '', // Email, máximo 50 caracteres...
                '', // Código de HomePaq...
                '', // Tokenid Correospaq...
                '', // Referencia Cliente 1...
                '', // Referencia Cliente 2...
                '', // Referencia Cliente 3...
                '', // Modalidad de entrega...
                '20', // Peso en gramos...
                '', // Largo en cm, solo para productos de paquetería...
                '', // Alto en cm, solo para productos de paquetería...
                '', // Ancho en cm, solo para productos de paquetería...
                '', // Seguro...
                '', // Importe Seguro...
                '', // Reembolso...
                '', // Importe Reembolso...
                '', // Tipo Reembolso...
                '', // IBAN Reembolso...
                '', // Seguro LI...
                '', // Importe Seguro LI...
                '', // Reembolso LI...
                '', // Importe Reembolso LI...
                '', // Tipo Reembolso LI...
                '', // Número de cuenta LI...
                '', // Entrega Exclusiva Destinatario...
                '3', // Formato de Prueba entrega, 3 es PEE...
                '', // TEXTO referencia PEE...
                '', // Información del remitente...
                '', // Indicador entrega con recogida...
                '', // Descripción envío a recoger...
                '', // Imprimir etiqueta recogida...
                '', // Código del envío de ida asociado...
                '', // Generar envío de vuelta...
                '', // Código del envío de vuelta...
                '', // Fecha de caducidad del envío de vuelta...
                '', // Envío de vuelta permite embalaje...
                '', // Código etiquetador del envío de vuelta...
                '', // Número SMS destinatario...
                '', // Número SMS remitente...
                '', // Idioma SMS Remitente...
                '', // Idioma SMS Destinatario...
                '', // Recogida a domicilio...
                '', // Número de intentos de entrega...
                '', // Tiempo de permanencia en lista...
                '', // Entrega en Fecha determinada...
                '', // Entrega en franja horaria...
                '', // Embalaje Prepagado...
                '', // Código embalaje prepago...
                '', // Código punto de admisión...
                '', // Frase promocional...
                '', // Fecha de depósito prevista...
                '', // Observaciones 1...
                '', // Observaciones 2...
                '', // Instrucciones de devolucion en caso de no entrega para paquetes internacionales...
                '', // Documento escaneado 1...
                '', // Acción documento 1...
                '', // Observaciones documento 1...
                '', // Documento escaneado 2...
                '', // Acción documento 2...
                '', // Observaciones documento 2...
                '', // Documento escaneado 3...
                '', // Accion documento 3...
                '', // Observaciones documento 3...
                '', // Horas de caducidad del envío de vuelta...
                '', // Entrega sin firma...
                '', // Tipo de modificación...
                '', // Tipo de Gestión...
                '', // Complejidad de gestión...
                '', // Autorización Previa a la Entrega...
                '1', // Tipo de envío, 1 es para documentos...
                '', // Envío comercial...
                '', // Factura superior a 500 euros...
                '', // DUA de exportación con Correos...
                '', // Cantidad-1...
                '', // Descripción de mercancía-1...
                '', // Peso neto-1...
                '', // Valor neto-1...
                '', // N Tarifario-1...
                '', // Descripción N Tarifario-1...
                '', // País de Origen-1...
                '', // Cantidad-2...
                '', // Descripción de mercancía-2...
                '', // Peso neto-2...
                '', // Valor neto-2...
                '', // N Tarifario-2...
                '', // Descripción N Tarifario-2...
                '', // País de Origen-2...
                '', // Cantidad-3...
                '', // Descripción de mercancía-3...
                '', // Peso neto-3...
                '', // Valor neto-3...
                '', // N Tarifario-3...
                '', // Descripción N Tarifario-3...
                '', // País de Origen-3...
                '', // Cantidad-4...
                '', // Descripción de mercancía-4...
                '', // Peso neto-4...
                '', // Valor neto-4...
                '', // N Tarifario-4...
                '', // Descripción N Tarifario-4...
                '', // País de Origen-4...
                '', // Cantidad-5...
                '', // Descripción de mercancía-5...
                '', // Peso neto-5...
                '', // Valor neto-5...
                '', // N Tarifario-5...
                '', // Descripción N Tarifario-5...
                '', // País de Origen-5...
                '', // Se adjunta factura...
                '', // Se adjunta licencia...
                '', // Se adjunta certificado...
                '', // Descripción factura adjunta...
                '', // Descripción licencia adjunta...
                '', // Descripción certificado adjunta...
                '', // Referencia aduanera del expedidor...
                '', // Referencia fiscal del importador...
                '', // Código del importador...
                '', // Número de IVA del importador...
                '', // Teléfono del importador...
                '', // Email del importador...
                '', // Contiene mercancías peligrosas...
                '', // Nombre...
                '', // Apellido 1...
                '', // Apellido 2...
                '', // Nif...
                '', // Empresa...
                '', // Persona contacto...
                '', // Tipo dirección...
                '', // Dirección...
                '', // Número...
                '', // Portal...
                '', // Bloque...
                '', // Escalera...
                '', // Piso...
                '', // Puerta...
                '', // Localidad...
                '', // Provincia...
                '', // CP...
                '', // ZIP...
                '', // Pais...
                $parsedData['TlfRemitente'][$id], // Teléfono contacto remitente, máximo 15 caracteres...
                $parsedData['EmailRemitente'][$id], // Email remitente, máximo 50 caracteres...
                '', // Numero Apartado reembolso...
                '', // Codired pago giro por reembolso lista...
                'E' // Fin De registro...
            ];
            $fileContent .= implode("\t", $line) . PHP_EOL;
        }    
        Storage::put($filePath, $fileContent);
        Log::info("File created successfully.");
    }
}
